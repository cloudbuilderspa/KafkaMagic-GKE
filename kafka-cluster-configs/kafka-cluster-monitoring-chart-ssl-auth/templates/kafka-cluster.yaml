apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ .Values.global.clusterName }}
  namespace: kafka
spec:
  kafka:
    version: {{ .Values.global.kafkaVersion }}
    replicas: {{ .Values.global.kafkaReplicas }}
    template:
      pod:
        tolerations:
          - key: "app.stateful/component"
            operator: "Equal"
            value: "kafka-broker"
            effect: NoSchedule
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                    - key: "app.stateful/component"
                      operator: "In"
                      values: 
                        - "kafka-broker"
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: "topology.kubernetes.io/zone"
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: kafka
                strimzi.io/cluster: {{ .Values.global.clusterName }}
                strimzi.io/component-type: kafka
    resources:
      requests:
        memory: {{ .Values.global.kafkaMemoryRequest }}
        cpu: {{ .Values.global.kafkaCpuRequest }}
      limits:
        memory: {{ .Values.global.kafkaMemoryLimit }}
        cpu: {{ .Values.global.kafkaCpuLimit }}
    jvmOptions:
      -Xms: {{ .Values.global.kafkaJvmXms }}
      -Xmx: {{ .Values.global.kafkaJvmXmx }}
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        type: LoadBalancer
        tls: true
        configuration:
          bootstrap:
            host: {{ .Values.global.ingress.hostname }}
          brokers:
          - broker: 0
            host: broker-0.{{ .Values.global.ingress.hostname }}
            advertisedHost: broker-0.{{ .Values.global.ingress.hostname }}
            advertisedPort: 9094
    config:
      offsets.topic.replication.factor: {{ .Values.global.offsetsTopicReplicationFactor }}
      transaction.state.log.replication.factor: {{ .Values.global.transactionStateLogReplicationFactor }}
      transaction.state.log.min.isr: {{ .Values.global.transactionStateLogMinIsr }}
      default.replication.factor: {{ .Values.global.defaultReplicationFactor }}
      min.insync.replicas: {{ .Values.global.minInsyncReplicas }}
      inter.broker.protocol.version: "{{ .Values.global.interBrokerProtocolVersion }}"
      log.message.format.version: "{{ .Values.global.kafkaVersion }}"
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: {{ .Values.global.kafkaStorageSize }}
          class: {{ .Values.global.kafkaStorageClass }}
          deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: {{ .Values.global.kafkaMetricsConfigName }}
          key: {{ .Values.global.kafkaMetricsConfigKey }}
  zookeeper:
    replicas: {{ .Values.global.zookeeperReplicas }}
    template:
      pod:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                    - key: "app.stateful/component"
                      operator: "In"
                      values: 
                        - "zookeeper"
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: "topology.kubernetes.io/zone"
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: zookeeper
                strimzi.io/cluster: {{ .Values.global.clusterName }}
                strimzi.io/component-type: zookeeper
    resources:
      requests:
        memory: {{ .Values.global.zookeeperMemoryRequest }}
        cpu: {{ .Values.global.zookeeperCpuRequest }}
      limits:
        memory: {{ .Values.global.zookeeperMemoryLimit }}
        cpu: {{ .Values.global.zookeeperCpuLimit }}
    jvmOptions:
      -Xms: {{ .Values.global.zookeeperJvmXms }}
      -Xmx: {{ .Values.global.zookeeperJvmXmx }}
    storage:
      type: persistent-claim
      size: {{ .Values.global.zookeeperStorageSize }}
      class: {{ .Values.global.zookeeperStorageClass }}
      deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: {{ .Values.global.zookeeperMetricsConfigName }}
          key: {{ .Values.global.zookeeperMetricsConfigKey }}
  entityOperator:
    topicOperator:
      resources:
        requests:
          cpu: {{ .Values.global.topicOperatorCpuRequest }}
          memory: {{ .Values.global.topicOperatorMemoryRequest }}
        limits:
          cpu: {{ .Values.global.topicOperatorCpuLimit }}
          memory: {{ .Values.global.topicOperatorMemoryLimit }}
    userOperator:
      resources:
        requests:
          cpu: {{ .Values.global.userOperatorCpuRequest }}
          ephemeral-storage: {{ .Values.global.userOperatorEphemeralStorageRequest }}
          memory: {{ .Values.global.userOperatorMemoryRequest }}
        limits:
          cpu: {{ .Values.global.userOperatorCpuLimit }}
          ephemeral-storage: {{ .Values.global.userOperatorEphemeralStorageLimit }}
          memory: {{ .Values.global.userOperatorMemoryLimit }}
