apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ include "kafka.fullname" . }}
spec:
  kafka:
    version: {{ .Values.global.kafkaVersion }}
    replicas: {{ .Values.global.kafkaReplicas }}
    template:
      pod:
        tolerations:
          - key: "app.stateful/component"
            operator: "Equal"
            value: "kafka-broker"
            effect: NoSchedule
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                    - key: "app.stateful/component"
                      operator: "In"
                      values: 
                        - "kafka-broker"
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: "topology.kubernetes.io/zone"
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: kafka
                strimzi.io/cluster: {{ include "kafka.fullname" . }}
                strimzi.io/component-type: kafka
    resources:
      requests:
        memory: {{ .Values.global.kafkaMemoryRequest }}
        cpu: {{ .Values.global.kafkaCpuRequest }}
      limits:
        memory: {{ .Values.global.kafkaMemoryLimit }}
        cpu: {{ .Values.global.kafkaCpuLimit }}
    jvmOptions:
      -Xms: {{ .Values.global.kafkaJvmXms }}
      -Xmx: {{ .Values.global.kafkaJvmXmx }}
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        {{- if .Values.global.kafkaListenersAuthenticationEnabled.plain }}
        authentication:
          type: scram-sha-512
        {{- end }}
      - name: tls
        port: 9093
        type: internal
        tls: true
        {{- if .Values.global.kafkaListenersAuthenticationEnabled.tls }}
        authentication:
          type: tls
        {{- end }}
      - name: external
        port: 9094
        type: loadbalancer
        tls: {{ .Values.global.externalListenerTls }}
        {{- if .Values.global.kafkaListenersAuthenticationEnabled.external }}
        authentication:
          type: tls
        {{- end }}
        configuration:
          bootstrap:
            annotations:
              {{- if .Values.global.externalDnsAnnotations.enabled }}
              {{- toYaml .Values.global.externalDnsAnnotations.dnsAnnotations | nindent 14 }}
              {{- end }}
    config:
      offsets.topic.replication.factor: {{ .Values.global.offsetsTopicReplicationFactor }}
      transaction.state.log.replication.factor: {{ .Values.global.transactionStateLogReplicationFactor }}
      transaction.state.log.min.isr: {{ .Values.global.transactionStateLogMinIsr }}
      default.replication.factor: {{ .Values.global.defaultReplicationFactor }}
      min.insync.replicas: {{ .Values.global.minInsyncReplicas }}
      inter.broker.protocol.version: "{{ .Values.global.interBrokerProtocolVersion }}"
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: {{ .Values.global.kafkaStorageSize }}
          class: {{ .Values.global.kafkaStorageClass }}
          deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    {{- if .Values.global.kafkaAuthorizationEnabled }}
    authorization:
      type: {{ .Values.global.kafkaAuthorization.type }}
      superUsers:
        {{- range .Values.global.kafkaAuthorization.superUsers }}
        - {{ . }}
        {{- end }}
    {{- end }}
  zookeeper:
    template:
      pod:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                    - key: "app.stateful/component"
                      operator: "In"
                      values: 
                        - "zookeeper"
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: "topology.kubernetes.io/zone"
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: zookeeper
                strimzi.io/cluster: {{ include "kafka.fullname" . }}
                strimzi.io/component-type: zookeeper
    replicas: {{ .Values.global.zookeeperReplicas }}
    resources:
      requests:
        memory: {{ .Values.global.zookeeperMemoryRequest }}
        cpu: {{ .Values.global.zookeeperCpuRequest }}
      limits:
        memory: {{ .Values.global.zookeeperMemoryLimit }}
        cpu: {{ .Values.global.zookeeperCpuLimit }}
    jvmOptions:
      -Xms: {{ .Values.global.zookeeperJvmXms }}
      -Xmx: {{ .Values.global.zookeeperJvmXmx }}
    storage:
      type: persistent-claim
      size: {{ .Values.global.zookeeperStorageSize }}
      class: {{ .Values.global.zookeeperStorageClass }}
      deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: zookeeper-metrics-config.yml
  entityOperator:
    tlsSidecar:
      resources:
        requests:
          cpu: {{ .Values.global.tlsSidecarCpuRequest }}
          memory: {{ .Values.global.tlsSidecarMemoryRequest }}
        limits:
          cpu: {{ .Values.global.tlsSidecarCpuLimit }}
          memory: {{ .Values.global.tlsSidecarMemoryLimit }}
    topicOperator:
      resources:
        requests:
          cpu: {{ .Values.global.topicOperatorCpuRequest }}
          memory: {{ .Values.global.topicOperatorMemoryRequest }}
        limits:
          cpu: {{ .Values.global.topicOperatorCpuLimit }}
          memory: {{ .Values.global.topicOperatorMemoryLimit }}
    userOperator:
      resources:
        requests:
          cpu: {{ .Values.global.userOperatorCpuRequest }}
          ephemeral-storage: {{ .Values.global.userOperatorEphemeralStorageRequest }}
          memory: {{ .Values.global.userOperatorMemoryRequest }}
        limits:
          cpu: {{ .Values.global.userOperatorCpuLimit }}
          ephemeral-storage: {{ .Values.global.userOperatorEphemeralStorageLimit }}
          memory: {{ .Values.global.userOperatorMemoryLimit }}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kafka-metrics
  labels:
    app: strimzi
data:
  kafka-metrics-config.yml: |
    # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
    lowercaseOutputName: true
    rules:
    # Special cases and very specific rules
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
      labels:
        clientId: "$3"
        topic: "$4"
        partition: "$5"
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
      labels:
        clientId: "$3"
        broker: "$4:$5"
    - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
      name: kafka_server_$1_connections_tls_info
      type: GAUGE
      labels:
        cipher: "$2"
        protocol: "$3"
        listener: "$4"
        networkProcessor: "$5"
    - pattern: kafka.server<type=(.+), name=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
      name: kafka_server_$1_connections_software
      type: GAUGE
      labels:
        clientSoftwareName: "$2"
        clientSoftwareVersion: "$3"
        listener: "$4"
        networkProcessor: "$5"
    - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+-total):"
      name: kafka_server_$1_$4
      type: COUNTER
      labels:
        listener: "$2"
        networkProcessor: "$3"
    - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
      name: kafka_server_$1_$4
      type: GAUGE
      labels:
        listener: "$2"
        networkProcessor: "$3"
    - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+-total)
      name: kafka_server_$1_$4
      type: COUNTER
      labels:
        listener: "$2"
        networkProcessor: "$3"
    - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
      name: kafka_server_$1_$4
      type: GAUGE
      labels:
        listener: "$2"
        networkProcessor: "$3"
    # Some percent metrics use MeanRate attribute
    # Ex) kafka.server<type=(KafkaRequestHandlerPool), name=(RequestHandlerAvgIdlePercent)><>MeanRate
    - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
      name: kafka_$1_$2_$3_percent
      type: GAUGE
    # Generic gauges for percents
    - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
      name: kafka_$1_$2_$3_percent
      type: GAUGE
    - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
      name: kafka_$1_$2_$3_percent
      type: GAUGE
      labels:
        "$4": "$5"
    # Generic per-second counters with 0-2 key/value pairs
    - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_total
      type: COUNTER
      labels:
        "$4": "$5"
        "$6": "$7"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_total
      type: COUNTER
      labels:
        "$4": "$5"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
      name: kafka_$1_$2_$3_total
      type: COUNTER
    # Generic gauges with 0-2 key/value pairs
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
        "$6": "$7"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
      name: kafka_$1_$2_$3
      type: GAUGE
    # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
    # Note that these are missing the '_sum' metric!
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_count
      type: COUNTER
      labels:
        "$4": "$5"
        "$6": "$7"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
        "$6": "$7"
        quantile: "0.$8"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_count
      type: COUNTER
      labels:
        "$4": "$5"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
        quantile: "0.$6"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
      name: kafka_$1_$2_$3_count
      type: COUNTER
    - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        quantile: "0.$4"
    # KRaft overall related metrics
    # distinguish between always increasing COUNTER (total and max) and variable GAUGE (all others) metrics
    - pattern: "kafka.server<type=raft-metrics><>(.+-total|.+-max):"
      name: kafka_server_raftmetrics_$1
      type: COUNTER
    - pattern: "kafka.server<type=raft-metrics><>(.+):"
      name: kafka_server_raftmetrics_$1
      type: GAUGE
    # KRaft "low level" channels related metrics
    # distinguish between always increasing COUNTER (total and max) and variable GAUGE (all others) metrics
    - pattern: "kafka.server<type=raft-channel-metrics><>(.+-total|.+-max):"
      name: kafka_server_raftchannelmetrics_$1
      type: COUNTER
    - pattern: "kafka.server<type=raft-channel-metrics><>(.+):"
      name: kafka_server_raftchannelmetrics_$1
      type: GAUGE
    # Broker metrics related to fetching metadata topic records in KRaft mode
    - pattern: "kafka.server<type=broker-metadata-metrics><>(.+):"
      name: kafka_server_brokermetadatametrics_$1
      type: GAUGE

  zookeeper-metrics-config.yml: |
    # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
    lowercaseOutputName: true
    rules:
    # replicated Zookeeper
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
      name: "zookeeper_$2"
      type: GAUGE
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
      name: "zookeeper_$3"
      type: GAUGE
      labels:
        replicaId: "$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(Packets\\w+)"
      name: "zookeeper_$4"
      type: COUNTER
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
      name: "zookeeper_$4"
      type: GAUGE
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
      name: "zookeeper_$4_$5"
      type: GAUGE
      labels:
        replicaId: "$2"
        memberType: "$3"

